<!-- 
	This is intended to be a build file that would automate the test and build process.
	For the most detail when running this build, call "ant -v clean package".  The build uses a simple lifecycle of: 
	
	init->compile->test->package
	
	The end goal is to produce a zip of a website you could deploy for your application.  This build is not intended to be an example
	for how to use Ant or the Flex SD Ant tasks.  This is just one possible way to utilize the FlexUnit4 Ant task. 
 -->
<project name="PlaybookSandbox" basedir="." default="test">
	<!-- setup a prefix for all environment variables -->
	<property environment="env" />
	<!-- Build Properties file needs to be filled out correctly -->
	<property file="${basedir}/build.properties"/>

	<!-- Setup Flex and FlexUnit ant tasks -->
	<!-- You can set this directly so mxmlc will work correctly, or set FLEX_HOME as an environment variable and use as below -->
	<!-- property name="FLEX_HOME" value="${env.FLEX_HOME}" / -->
	<property name="FLEX_HOME" value="${build.airSDK}" />
	<!-- Setup paths for build -->
	<property name="TABLET_SDK" value="${build.tabletSDK}" />
	<property name="APP_NAME" value="${ant.project.name}" />
	<property name="ICON_NAME" value="${build.iconFile}" />
	<property name="SPLASHSCREEN_NAME" value="${build.splashSceenFile}" />
	<property name="main.src.loc" location="${basedir}/src/" />
	<property name="test.src.loc" location="${basedir}/tests/" />
	<property name="lib.loc" location="${basedir}/libs" />
	<!-- TabletSDK paths for build -->
	<property name="tabletsdk.loc" location="${TABLET_SDK}" />
	<property name="tabletsdklibs.loc" location="${TABLET_SDK}/frameworks/libs" />
	<property name="tabletsdkbin.loc" location="${TABLET_SDK}/bin" />
	<!-- AIRSDK paths for build -->
	<property name="airsdk.loc" location="${FLEX_HOME}/frameworks/libs/air" />
	<!-- Test and deploy output directories for build process -->
	<property name="output.loc" location="${basedir}/target" />
	<property name="testrunner.loc" location="${output.loc}/testrunner" />
	<property name="report.loc" location="${output.loc}/report" />
	<property name="deploy.loc" location="${output.loc}/deploy" />

	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	<taskdef resource="flexUnitTasks.tasks">
	   <classpath>
	      <fileset dir="${lib.loc}">
	         <include name="flexUnitTasks*.jar" />
	      </fileset>
	   </classpath>
	</taskdef>
	
	<!-- Add JSCH jar to the classpath for scp/sshexec -->
	<classloader>
	   <classpath>
	      <fileset dir="${lib.loc}" includes="jsch*.jar"/>
	   </classpath>
	</classloader>
	
	<!-- Set the timestamp -->
	<macrodef name="set.timestamp">
		<sequential>
	    	<tstamp>
	      		<format property="current.time" pattern="yyyyMMddhhmm"/>
	    	</tstamp>
	  	</sequential>
	</macrodef>
	
	<target name="clean">
		<!-- Remove all directories created during the build process -->
		<delete dir="${output.loc}" />
	</target>

	<target name="init">
		<!-- Create directories needed for the build process -->
		<mkdir dir="${output.loc}" />
		<mkdir dir="${testrunner.loc}" />
		<mkdir dir="${report.loc}" />
		<mkdir dir="${deploy.loc}" />
	</target>

	<target name="compile" depends="init">
		<!-- Compile main application file as a SWF -->
		<mxmlc file="${main.src.loc}/${APP_NAME}.as" output="${testrunner.loc}/${APP_NAME}.swf" configname="airmobile">
			<library-path dir="${lib.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			<library-path dir="${tabletsdklibs.loc}/qnx-screen" append="true">
				<include name="*.swc" />
			</library-path>
			<library-path dir="${tabletsdklibs.loc}/blackberry" append="true">
				<include name="*.swc" />
			</library-path>
			<library-path dir="${tabletsdklibs.loc}/air" append="true">
				<include name="*.swc" />
			</library-path>
			<library-path dir="${airsdk.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			<compiler.verbose-stacktraces>true</compiler.verbose-stacktraces>
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>
	</target>

	<target name="test" depends="compile">
		<!-- Execute FlexUnit tests and publish reports -->
		<flexunit 
		    workingDir="${testrunner.loc}"
		    toDir="${report.loc}" 
			haltonfailure="false" 
			verbose="true" 
			localTrusted="true"
			failureproperty="flexunit.failed">
	      <source dir="${main.src.loc}" />
	      <testSource dir="${test.src.loc}">
	         <include name="**/*Test.as" />
	      </testSource>
	      <library dir="${lib.loc}" />
			<library dir="${tabletsdklibs.loc}/qnx-screen">
				<include name="*.swc" />
			</library>
			<library dir="${tabletsdklibs.loc}/blackberry">
				<include name="*.swc" />
			</library>
			<library dir="${tabletsdklibs.loc}/air">
				<include name="*.swc" />				
			</library>
			<library dir="${airsdk.loc}">
				<include name="*.swc" />
			</library>
	   </flexunit>

		<!-- Generate readable JUnit-style reports -->
		<junitreport todir="${report.loc}">
			<fileset dir="${report.loc}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.loc}/html" />
		</junitreport>
		<fail message="Tests failed!" if="flexunit.failed" />
	</target>
	
	<target name="package">
		<!-- Assemble for bar file, files must be packaged from root -->
		<echo message="coping files to:${basedir} from:${main.src.loc}"/>
		<copy file="${testrunner.loc}/${APP_NAME}.swf" todir="${basedir}" />
		<copy file="${main.src.loc}/${APP_NAME}-app.xml" todir="${basedir}" />
		<copy file="${main.src.loc}/blackberry-tablet.xml" todir="${basedir}" />
		<copy file="${main.src.loc}/${ICON_NAME}" todir="${basedir}" />
		<copy file="${main.src.loc}/${SPLASHSCREEN_NAME}" todir="${basedir}" />
		
		<!-- Create bar file in ${deploy.loc} -->
		<exec executable="${tabletsdkbin.loc}/blackberry-airpackager" failonerror="true">
		    <arg value="-package"/>
		    <arg value="${deploy.loc}/${APP_NAME}.bar"/>
		    <arg value="${basedir}/${APP_NAME}-app.xml"/>
			<arg value="${basedir}/blackberry-tablet.xml"/>
		    <arg value="${basedir}/${APP_NAME}.swf"/>
			<arg value="${basedir}/${ICON_NAME}"/>
			<arg value="${basedir}/${SPLASHSCREEN_NAME}"/>
		</exec>
		
		<!-- Sign bar file with server -->
		<exec executable="${tabletsdkbin.loc}/blackberry-signer" failonerror="true">
			<arg value="-verbose"/>
			<arg value="-cskpass"/>
			<arg value="${env.BLACKBERRY_SIGNING_PASSWORD}"/>
			<arg value="-keystore"/>
			<arg value="${build.developerCert}/DeveloperCertificate.p12"/>
			<arg value="-storepass"/>
			<arg value="${env.BLACKBERRY_SIGNING_PASSWORD}"/>
			<arg value="${deploy.loc}/${APP_NAME}.bar"/>
			<arg value="RDK"/>
		</exec>

		<!-- Sign bar file with developer certificate -->
		<exec executable="${tabletsdkbin.loc}/blackberry-signer" failonerror="true">
			<arg value="-verbose"/>
			<arg value="-keystore"/>
			<arg value="${build.developerCert}/DeveloperCertificate.p12"/>
			<arg value="-storepass"/>
			<arg value="${env.BLACKBERRY_SIGNING_PASSWORD}"/>
			<arg value="${deploy.loc}/${APP_NAME}.bar"/>
			<arg value="author"/>
		</exec>
		
		<!-- Remove unneccessary directories-->
		<delete file="${basedir}/${APP_NAME}.swf" />
		<delete file="${basedir}/${APP_NAME}-app.xml" />
		<delete file="${basedir}/blackberry-tablet.xml" />
		<delete file="${basedir}/${ICON_NAME}" />
		<delete file="${basedir}/${SPLASHSCREEN_NAME}" />
		<delete dir="${testrunner.loc}" />
	</target>
	
	<target name="deploy" depends="package">
		<!-- Create time-stampped directory on server-->
		<set.timestamp/>
		<sshexec host="assets.xtremelabs.com" 
			username="xtreme" 
			passphrase="${env.ANT_SCP_PASSWORD}" 
			trust="true" 
		    keyfile="${build.keyfile}" 
			failonerror="false" 
		    command="mkdir -p /home/xtreme/mobile_assets/${APP_NAME}/${current.time}"/>
		<!-- Copy bar file onto server-->
		<scp file="${deploy.loc}/${APP_NAME}.bar" 
			todir="xtreme:${env.ANT_SCP_PASSWORD}@assets.xtremelabs.com:/home/xtreme/mobile_assets/${APP_NAME}/${current.time}/" 
			verbose="true" 
			trust="yes"/>
		<!-- Set proper permissions for directory and file on server-->
		<sshexec host="assets.xtremelabs.com" 
			username="xtreme" 
			passphrase="${env.ANT_SCP_PASSWORD}" 
			trust="true" 
			keyfile="/Users/KennethYip/.ssh/id_rsa" 
			failonerror="false" 
			command="cd /home/xtreme/mobile_assets/${APP_NAME}/; chmod -R 775 ${current.time}/${APP_NAME}.bar"/>
		<!-- Output download link to file-->
		<echo message="http://assets.xtremelabs.com/${APP_NAME}/${current.time}/${APP_NAME}.bar"/>
	</target>
</project>